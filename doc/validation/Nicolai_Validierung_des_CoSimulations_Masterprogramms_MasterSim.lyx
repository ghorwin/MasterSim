#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{parskip}

\usepackage[hang,scriptsize]{subfigure}
\usepackage[format=hang,
font={footnotesize},
labelfont={bf},
margin=1cm,
aboveskip=5pt,
position=bottom]{caption}

\usepackage{float}
\usepackage{color}
\usepackage{calc}

\definecolor{linkblue}{rgb}{0,0,0.4}
\definecolor{navy}{rgb}{0,0,0.3}
\definecolor{light-gray}{gray}{0.98}
\definecolor{dark-gray}{gray}{0.45}

\usepackage{dsfont}

\usepackage[utf8]{inputenc}

\newcommand{\wframe}[1]{\frame{#1}}

\usepackage[ruled,vlined]{algorithm2e}

\usepackage{booktabs}

\usepackage{lastpage}

\usepackage[a-2b]{pdfx}

\begin{filecontents*}{\jobname.xmpdata}
  \Title{Validierung des Co-Simulationsmasterprogramms MASTERSIM}
  \Author{A. Nicolai}
  \Keywords{Co-Simulation\sep FMI\sep MASTERSIM\sep Validierung\sep Genauigkeit}
  \Publisher{Qucosa}
\end{filecontents*}
\end_preamble
\use_default_options false
\begin_modules
enumitem
\end_modules
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "Validation of the FMI co-simulation master program MasterSim"
\pdf_author "Andreas Nicolai"
\pdf_keywords "Co-Simulation, FMI, validation, standard compliance, accuracy"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=linkblue, citecolor=linkblue, urlcolor=linkblue, bookmarksnumbered=true"
\papersize a4paper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\listings_params "language={C++},basicstyle={\scriptsize\ttfamily\color{black}},commentstyle={\ttfamily\itshape\color{dark-gray}},stepnumber=1,showspaces=false,showstringspaces=false,showtabs=false,frame=single,tabsize=4,captionpos=b,breaklines=true,breakatwhitespace=false,texcl=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Validierung des Co-Simulations-Masterprogramms MASTERSIM
\end_layout

\begin_layout Author
Andreas Nicolai
\begin_inset Newline newline
\end_inset


\size normal
Institut für Bauklimatik, TU Dresden
\size default

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
andreas.nicolai@tu-dresden.de
\end_layout

\begin_layout Abstract
Die im Functional Mock-Up Interface (FMI) Standard definierte Co-Simulations-Fun
ktionalität ist vielfältig und enthält viele Implementierungsregeln.
 Die korrekte Umsetzung dieser Regeln ist zwingend notwendig, um Simulationsmode
lle verschiedener Tools/Hersteller gemeinsam gekoppelt einsetzen zu können.
 In diesem Artikel wird die Methodik und Vorgehensweise bei der Prüfung
 der Implementierung des Co-Simulations-Programms MASTERSIM beschrieben.
 Es werden einige der dabei erkannten und behobenen Probleme beim Test der
 Implementierung mit anderen Simulationsmodellen diskutiert, sowie die dafür
 notwendigen Anpassungen und Erweiterungen am MASTERSIM Programm.
 Weiterhin werden die Ansätze zur Automatisierung des Testprozederes beschrieben
 und die verschiedenen entwickelten Skripte vorgestellt.
\end_layout

\begin_layout Standard

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{fancy}
\end_layout

\begin_layout Plain Layout


\backslash
fancyhf{} %alle Kopf- und Fußzeilenfelder bereinigen
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[L]{
\backslash
includegraphics[width=3cm]{logolinks}} %Kopfzeile links
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[C]{
\backslash
includegraphics[width=9.4cm]{logomitte}} %zentrierte Kopfzeile
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[R]{
\backslash
includegraphics[width=2.5cm]{logorechts}} %Kopfzeile rechts
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
headrulewidth}{0pt} %obere Trennlinie
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[C]{
\backslash
small Seite 
\backslash
thepage
\backslash
 von
\backslash
 
\backslash
pageref{LastPage} } %Seitennummer
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
footrulewidth}{0.4pt} %untere Trennlinie
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fancyhf{} %alle Kopf- und Fußzeilenfelder bereinigen
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[L]{} %Kopfzeile links
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[C]{} %zentrierte Kopfzeile
\end_layout

\begin_layout Plain Layout


\backslash
fancyhead[R]{Validatierung des Co-Simulationsmasters MASTERSIM}
\end_layout

\begin_layout Plain Layout

%
\backslash
fancyhead[R]{
\backslash
includegraphics[width=4cm]{gwt_logo}} %Kopfzeile rechts
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
headrulewidth}{0.4pt} %obere Trennlinie
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[L]{
\backslash
small 
\backslash
today} %Seitennummer
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[C]{
\backslash
small A.
 Nicolai } %Seitennummer
\end_layout

\begin_layout Plain Layout


\backslash
fancyfoot[R]{
\backslash
small Seite 
\backslash
thepage
\backslash
 von
\backslash
 
\backslash
pageref{LastPage} } %Seitennummer
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
footrulewidth}{0.4pt} %untere Trennlinie
\end_layout

\end_inset


\end_layout

\begin_layout Section
Hintergrund
\end_layout

\begin_layout Standard
Der 
\emph on
Functional Mock-Up Interface
\emph default
 (FMI) Standard definiert eine Programmierschnittstelle für eine Bibliothek,
 welche eine spezifische Modell-/Berechnungsfunktionalität kapselt.
 Dadurch können Simulationsmodelle zusammen mit anderen Modellen zur Laufzeit
 gekoppelt werden.
 Der Standard defiiert weiterhin den Inhalt und die Struktur von modellbeleitend
en Metadaten, welche die Eigenschaften des Modells und der Schnittstelle
 definieren (z.B.
 die veröffentlichten Variablennamen und -typen, etc.).
\end_layout

\begin_layout Standard
Programme, welche diese Bibliotheken und dazugehörige Metadaten erstellen
 werden als Exporttools bezeichnet.
 Die exportierte Programmbibliothek und Metadaten werden in einer Verzeichnisstr
uktur abgelegt und in einem zip-Archiv verpackt (welches die Endung 
\family typewriter
.fmu
\family default
 trägt) und als 
\emph on
Functional Mock-Up Unit
\emph default
 (FMU) bezeichnet wird.
 Programme, welche derartige FMUs verwenden und damit Simulationen durchführen
 sind Importtools.
 
\end_layout

\begin_layout Standard
Der Standard definiert zwei Kopplungsmodi: 
\emph on
FMI for Model Exchange
\emph default
 und 
\emph on
FMI for Co-Simulation
\emph default
.
 Bei Letzterem enthält jede FMU einen eigenen Zeitintegrator, sofern dynamische
 Gleichungen zu lösen sind.
 Bei Ersterem muss das importierende Tool einen solchen Integrationsalgorithmus
 zentral für alle importierten FMUs bereitstellen.
 Das Programm MASTERSIM ist ein Importtool für Co-Simulation FMUs, daher
 auch 
\emph on
Co-Simulations-Masterprogram
\emph default
 genannt.
\end_layout

\begin_layout Section
Validierungsmethodik
\end_layout

\begin_layout Standard
Bei der Entwicklung des Programms MASTERSIM wurden nach Erreichen einer
 Mindestfunktionalität, entwicklungsbegleitende Modultests entwickelt.
 Diese testen (und demonstrieren) die korrekte Implementierung der verschiedenen
 Masteralgorithmen und Zeitschrittsadaptionstechniken.
 Im Detail sind diese Tests in 
\begin_inset CommandInset citation
LatexCommand cite
key "nicolai:2018:qucosa_MastersimAlgorithms"
literal "false"

\end_inset

 und 
\begin_inset CommandInset citation
LatexCommand cite
key "nicolai:2019:TechReport_MasterSimTestCase"
literal "false"

\end_inset

 beschrieben.
 Eine kurze Zusammenfassung der Algorithmentest ist in Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modultests"
plural "false"
caps "false"
noprefix "false"

\end_inset

 beschrieben.
\end_layout

\begin_layout Standard
Anschließend erfolgte eine Validierung durch Querschnittstests entsprechend
 der FMI Cross-Check-Regeln.
 Diese Validierung ist Voraussetzung für die Auflistung des Programms in
 der offiziellen Tool-Seite des FMI-Standards und dient der Information
 über mögliche Interoperabilität zwischen Simulationsprogrammen.
 Für einen Co-Simulations-Master ist die Fähigkeit, möglichst viele unterschiedl
iche FMUs aus verschiedenen Tools verwenden zu können, eine der wichtigsten
 Eigenschaften.
 Die Details dieser Validierungsprozedur und der benötigten Anpassungen
 am MASTERSIM-Programm sind in Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:FMI-Cross-Check-Validierung"
plural "false"
caps "false"
noprefix "false"

\end_inset

 beschrieben.
\end_layout

\begin_layout Standard
Eine allgemeine Einführung zu Validierungsmethodiken und Verfahrensweisen
 zur Qualitätssicherung bei Simulationsprogrammen einschließlich der Beschreibun
g von Modul- und Querschnittstests ist
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "nicolai:2019:validation_of_simtools"
literal "false"

\end_inset

 in gegeben.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modultests"

\end_inset

Modultests
\end_layout

\begin_layout Subsection
Konzept
\end_layout

\begin_layout Standard
MASTERSIM kann verschiedene Kopplungsalgorithmen verwenden.
 Diese unterscheiden sich hinsichtlich der Funktionalitäten der beteiligten
 FMUs.
 FMUs mit Schnittstelle 1.0 können nicht zurückgesetzt werden, wodurch eine
 Iteration über den gleichen Kommunikationsschritt nicht möglich ist.
 FMUs mit Schnittstelle 2.0 können zurückgesetzt werden, wodurch auch iterierende
 Algorithmen, d.h.
 die Wiederholung eines Kommunikationsschritts, möglich ist.
\end_layout

\begin_layout Standard
Weiterhin unterscheiden sich die Algorithmen bei der Zeitschrittweitenanpassung:
\end_layout

\begin_layout Itemize
feste Kommunikationsschrittweite,
\end_layout

\begin_layout Itemize
Schrittweite reduzieren bei Konvergenzfehler (nur iterierende Algorithmen),
\end_layout

\begin_layout Itemize
Schrittweite entsprechend Fehlerschätzer anpassen.
\end_layout

\begin_layout Standard
Natürlich haben auch numerische Konstanten, wie die Schrittweitenbegrenzung
 nach oben und unten, die geforderten Toleranzen bei fehlerkontrollierten
 Verfahren, und die Ausgabehäufigkeit einen Einfluss auf das Ergebnis.
 
\end_layout

\begin_layout Standard
Alle Kombinationsmöglichkeiten indivuell zu testen, wäre extrem zeitaufwändig
 und nur bedingt zielführend.
 Es wurden daher einzelne Tests entwickelt, die immer eine sinnvolle Kombination
 der Optionen vereinen und charakteristische Ausgaben erzeugen.
\end_layout

\begin_layout Standard
Der Testfall 
\emph on
Math003
\emph default
 (einer, aus einer Reihe von speziell definierten Testfällen für Co-Simulation)
 ist dabei besonders geeignet, da drei indivuell unterschiedliche FMUs mit
 unstetigem Verhalten gekoppelt werden.
 Dabei lassen sich die theoretisch erwarteten Ergebnisse genau ablesen.
 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Beispielergebnisse-der-Modultest-Math003"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt beispielsweise, wie bei einem einfachen Gauss-Jacobi-Algorithmus
 ohne Iteration die Information über Variablenänderungen von einem Kommunikation
sschritt zum nächsten von einer FMU (hier Variable) in die nächste propagiert
 wird.
 Dies ist für diesen Algorithmus das erwartete Ergebnis und muss bei korrekter
 Implementierung auch genau so erhalten werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/Math003_GaussJacobi_1iters_fixedStep_0.1s_x3_detail.pdf
	width 8cm

\end_inset


\begin_inset Graphics
	filename fig/Math003_GaussJacobi_1iters_fixedStep_0.1s_x4_detail.pdf
	width 8cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Beispielergebnisse-der-Modultest-Math003"

\end_inset

Beispielergebnisse der Modultest-Validierung, Vergleich exakte Referenzlösung
 mit numerischer Lösung: einfacher Gauss-Jacobi-Algorithmus ohne Iteration
 mit relativ großer Zeitschrittweite; um einen Schritt verzögerte Signalweiterle
itung in Variable 
\begin_inset Formula $x_{3}$
\end_inset

 und wiederum um einen weiteren Schritt verzögerte Reaktion von Variable
 
\begin_inset Formula $x_{4}$
\end_inset

 sind 
\emph on
korrekte 
\emph default
Ergebnisse für diese Algorithmus.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Für diesen Testfall und zwei weitere Testfälle wurden nun verschiedene Projektda
teien mit unterschiedlichen Algorithmen- und Parameterkombinationen erstellt,
 ausgeführt und die Ergebnisse kontrolliert.
 Danach wurden die erhaltenen Ergebnisse und Solverstatistiken als Referenz
 für zukünftige Kontrollrechnungen abgelegt (im Quelltextrepository im Unterverz
eichnis 
\family typewriter
<repo-root>/data/tests
\family default
).
\end_layout

\begin_layout Subsection
Verwendete FMUs
\end_layout

\begin_layout Standard
Eine Schwierigkeit bei der Validierung von Co-Simulations-Programmen liegt
 in der Verwendung von FMUs als Black-Box-Simulationsmodule.
 Die Korrektheit der Masterprogramm-Funktionalität hängt direkt von der
 Voraussetzung ab, dass die Berechnungsfunktionalität in den FMUs korrekt
 funktioniert.
 
\end_layout

\begin_layout Standard
In den ersten Versuchen wurden die Testgleichungen in Modelica implementiert
 und dann aus einer Modelica-Entwicklungsumgebung (hier SimulationX und
 Dymola) FMUs exportiert.
 Es zeigte sich jedoch, dass aufgrund der bei diesem Export verwendeten
 numerischen Zeitintegrationsverfahren und der individuellen Umsetzung des
 Modelica-Modells in Machinencode Abweichungen vom idealen vorgegeben Verhalten
 auftraten.
 Diese wiederum verfälschten die Ergebnisse der gekoppelten Simulation und
 machten eine direkte Prüfung der MASTERSIM-Implementierung schwierig.
\end_layout

\begin_layout Standard
Daher wurden für die Tests eigene, spezifische C++ Implementierung mit exakt
 den geforderten Gleichungen und analytischen Integrationsgleichungen implementi
ert.
 Diese Test-FMUs sind strukturell sehr ähnlich, sodass für den Zweck des
 Test/Referenz-FMU-Entwicklung ein eigenes Projekt entwickelt wurde.
 Dieser FMICodeGenerator
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
FMICodeGenerator
\family default
 Quelltext-Repository: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/ghorwin/FMICodeGenerator
\end_layout

\end_inset


\end_layout

\end_inset

 kann dazu verwendet werden, sehr schnell ein fertig compilierfähiges Grundgerüs
t für eine FMU zu erstellen, worin nur noch an wenigen Stellen im Quelltext
 die eigentliche Mathematik implementiert werden muss (siehe auch Beispiel
 auf den Wiki-Seiten des Projekts
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/ghorwin/FMICodeGenerator/wiki/Test-scenario:-Stateless-P-contr
oller
\end_layout

\end_inset

, Wiki-Seite mit komplettem Ablauf der Script-gestützten FMU-Generierung
\end_layout

\end_inset

).
 Mithilfe dieses Code-Generators wurden nun alle für die MASTERSIM-Modultests
 benötigten FMUs erstellt.
\end_layout

\begin_layout Subsection
Automatisierte Modultests während der Entwicklung
\end_layout

\begin_layout Standard
Die Erstellung des Programms MASTERSIM erfolgt scriptgesteuert.
 Nachgelagert kann ein Python-Script (entwickelt am IBK, TU Dresden) gestartet
 werden, welches eine Verzeichnisstruktur 
\family typewriter
<repo-root>/data/tests
\family default
 durchläuft, und nach Testfällen sucht (
\family typewriter
*.msim
\family default
-Dateien) .
 Existiert für den Testfall ein Unterverzeichnis mit Referenzergebnissen
 für die aktuelle Plattform und Compiler, wird der Testfall simuliert und
 die Simulationsstatistiken und Ergebnisse verglichen.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:ModultestReport"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt exemplarisch einen Auszug aus dem Validierungsreport:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,showstringspaces=false,tabsize=4,basicstyle={\scriptsize\ttfamily\color{black}},commentstyle={\ttfamily\itshape\color{dark-gray}},showtabs=false,frame=single,captionpos=b,breakatwhitespace=false,texcl=true"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

../../data/tests/linux64/Math_003_control_loop/Math003_GaussSeidel_2iters_adaptive_R
ichardson.msim
\end_layout

\begin_layout Plain Layout

                                     Reference             New
\end_layout

\begin_layout Plain Layout

  ConvergenceFails                          41 ==           41
\end_layout

\begin_layout Plain Layout

  ConvergenceIterLimitExceeded              41 ==           41
\end_layout

\begin_layout Plain Layout

  ErrorTestFails                            85 ==           85
\end_layout

\begin_layout Plain Layout

  MasterAlgorithmSteps                     324 ==          324
\end_layout

\begin_layout Plain Layout

  --
\end_layout

\begin_layout Plain Layout

  ErrorTestTime                           0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  FrameworkTimeWriteOutputs               0.01 ~~         0.07
\end_layout

\begin_layout Plain Layout

  MasterAlgorithmTime                     0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[1]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[2]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[3]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  WallClockTime                           0.01 ~~         0.07
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Checked: values.csv
\end_layout

\begin_layout Plain Layout

../../data/tests/linux64/Math_003_control_loop/Math003_GaussSeidel_2iters_fixedStep.m
sim
\end_layout

\begin_layout Plain Layout

                                     Reference             New
\end_layout

\begin_layout Plain Layout

  ConvergenceFails                           0 ==            0
\end_layout

\begin_layout Plain Layout

  ConvergenceIterLimitExceeded              95 ==           95
\end_layout

\begin_layout Plain Layout

  ErrorTestFails                             0 ==            0
\end_layout

\begin_layout Plain Layout

  MasterAlgorithmSteps                    1000 ==         1000
\end_layout

\begin_layout Plain Layout

  --
\end_layout

\begin_layout Plain Layout

  ErrorTestTime                           0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  FrameworkTimeWriteOutputs               0.02 ~~         0.02
\end_layout

\begin_layout Plain Layout

  MasterAlgorithmTime                     0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[1]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[2]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  Slave[3]Time                            0.00 ~~         0.00
\end_layout

\begin_layout Plain Layout

  WallClockTime                           0.02 ~~         0.02
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Checked: values.csv
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Successful projects:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Project path                                                 Wall clock
 time [s]
\end_layout

\begin_layout Plain Layout

FileReaderSlave/LV_Richardson_PredatorFromFile_noiter                  0.318
\end_layout

\begin_layout Plain Layout

Lotka_Volterra_System/LV_Richardson_5iter                              0.244
\end_layout

\begin_layout Plain Layout

Lotka_Volterra_System/LV_Richardson_noiter                             0.224
\end_layout

\begin_layout Plain Layout

Math_003_control_loop/Math003_GaussJacobi_1iters_fixedStep             0.040
\end_layout

\begin_layout Plain Layout

Math_003_control_loop/Math003_GaussSeidel_1iters_fixedStep             0.024
\end_layout

\begin_layout Plain Layout

Math_003_control_loop/Math003_GaussSeidel_2iters_adaptive              0.006
\end_layout

\begin_layout Plain Layout

Math_003_control_loop/Math003_GaussSeidel_2iters_adaptive_Richardson   0.073
\end_layout

\begin_layout Plain Layout

Math_003_control_loop/Math003_GaussSeidel_2iters_fixedStep             0.023
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:ModultestReport"

\end_inset

Auszug aus dem Validierungsreport für MASTERSIM (automatische Modultests)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:FMI-Cross-Check-Validierung"

\end_inset

FMI Cross-Check Validierung
\end_layout

\begin_layout Subsection
Hintergrund
\end_layout

\begin_layout Standard
Wie im Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modultests"
plural "false"
caps "false"
noprefix "false"

\end_inset

 über Modultests beschrieben, können verschiedene Algorithmen und Optionen
 zu zum Teil sehr unterschiedlichen Ergebnissen führen.
 Man könnte den Ansatz dennoch für die Validierung verschiedener Co-Simulations-
Master verallgemeinern, d.h.
 man benennt für jeden Testfall kontret die zu verwendenden Algorithmen
 und Parameter.
 Dann könnte man entsprechend strenge Übereinstimmung mit entsprechend passenden
 Referenzwerten fordern.
\end_layout

\begin_layout Standard
Zum Zeitpunkt der Einführung des FMI Standards wurde die FMU-Importfunktionalitä
t in vielen bereits vorhandenen Tools nachgerüstet.
 Dabei wurden viele Kompromisse und Workarounds verwendet, um relativ schnell
 eine gewisse Basiskompatibiltät herzustellen.
 Es zeigte sich jedoch, dass nur wenige Importtools (d.h.
 Co-Simulations-Masterprogramme) mit nur wenigen exportieren FMUs zusammenarbeit
en konnten.
 Dies lag an zum Teil unspezifischen Formulierungen im Standard, unterschiedlich
en Interpretationen bzw.
 Interpretationsfehlern und natürlich in Programmier- und Umsetzungsfehlern.
 Hätte man nun den strengen Ansatz aus der Modulprüfung zum Test verwendet,
 würden noch mehr Tools durch das Validierungsraster fallen.
 Das würde aber dem Entwicklungsziel der maximalen Interoperabilität des
 FMI-Standards zuwiederlaufen und im Wiederspruch zu dem Wunsch des FMI
 Konsortiums stehen, möglichst schnell den FMI Standard zu etablieren und
 zu verbreiten.
 Deshalb ist ein wesentlich einfacheres Testprozedere formuliert worden.
\end_layout

\begin_layout Standard
In diesem Testprozess, formuliert in den Cross-Check-Regeln, wurde der Schwerpun
kt auf Interoperabilität gelegt.
\end_layout

\begin_layout Subsection
Vorgehensweise und Validierungsprinzip
\end_layout

\begin_layout Standard
Das Prinzip des Cross-Checks kann wie folgt zusammengefasst werden:
\end_layout

\begin_layout Enumerate
verschiedenen Simulationsprogramme exportieren FMUs und führen für diese
 zunächst einen Standard-Über\SpecialChar softhyphen
einstimmungs-Check (engl.
 
\emph on
Compliance check
\emph default
) durch.
 Dieser prüft grundlegende Eigenschaften, wie z.B.
 korrekt gesetzte Metadaten, und grundlegend korrekte Funktion der Programmiersc
hnittstelle.
 Es wird hierbei Testweise eine einfache alleinstehende Simulation mit Standardw
erten durchgeführt (konstante Kommunikationsschrittweite, keine Iteration
 und kein Datenaustausch mit anderen FMUs).
 Ist der Test erfolgreich abgeschlossen, wird die FMU in eine Verzeichnisstruktu
r überführt.
 Diese wird in einem fmi-cross-check-Repository öffentlich sichtbar vorgehalten
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Github-Repository mit Cross-Check Daten: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/modelica/fmi-cross-check
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Zusätzlich zu der FMU selbst muss man Referenzergebnisse ablegen.
 
\emph on
Hierbei sind die Cross-Check-Regeln sehr knapp und unpräzise formuliert.
 Es ist z.B.
 nicht definiert, ob die Referenzergebnisse mit der FMU selbst erzeugt werden,
 oder mit einem anderen Berechnungsverfahren/Modell erstellt wurden.
 Es ist daher möglich, dass selbst bei korrekter Funktionalität des FMU-Importto
ols, die Referenzergebnisse nicht wiedergegeben werden können.
\end_layout

\begin_layout Enumerate
Wurden bei der Berechnung der Referenzergebnisse Eingangsvariablen im Modell
 verwendet, sind diese auch in einer csv-Datei anzugeben.
 
\emph on
Die Cross-Check-Regeln definieren hier jedoch nicht, wie verschiedenen Datentype
n in der csv-Datei identifiziert werden.
 Es muss daher aktuell angenommen werden, dass der Datentyp dem der verknüpften
 Eingangsvariable der FMU entspricht.
\end_layout

\begin_layout Enumerate
Jedes FMU-Importtool (z.B.
 MASTERSIM als Co-Simulations-Masterprogramm) kann nun diese FMUs einbinden
 und simulieren.
 Hierbei obliegt es dem importierenden Tool zu entscheiden, ob Zeitschrittanpass
ung oder konstante Zeitschritte verwendet werden.
 Auch alle weiteren (numerischen) Parameter, können beliebig gewählt werden.
\end_layout

\begin_layout Enumerate
Die simulierten Ergebnisse werden nun offiziell dokumentiert.
 Hierfür muss eine Verzeichnisstruktur im oben genannten fmi-cross-check-Reposit
ory entsprechend folgendem Verzeichnisschema befüllt werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

results/
\end_layout

\begin_layout Plain Layout

  {FMI_Version}/
\end_layout

\begin_layout Plain Layout

    {FMI_Type}/
\end_layout

\begin_layout Plain Layout

      {Platform}/
\end_layout

\begin_layout Plain Layout

        {Importing_Tool_Name}/
\end_layout

\begin_layout Plain Layout

          {Importing_Tool_Version}/
\end_layout

\begin_layout Plain Layout

            {Exporting_Tool_Name}/
\end_layout

\begin_layout Plain Layout

              {Exporting_Tool_Version}/
\end_layout

\begin_layout Plain Layout

                {Model_Name}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
In dieses Verzeichnis kopiert man die erstellten Simulationsergebnisse und
 bei Erfolg die Datei 
\family typewriter
passed
\family default
.
 Diese Änderungen werden in einem persönlichen Fork
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ein 
\emph on
Fork
\emph default
 ist eine Abspaltung von einem Repository, d.h.
 eine Kopie eines bestimmten Bearbeitungsstandes.
\end_layout

\end_inset

 vom offiziellen Repository eingecheckt und dann via Pull-Request
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ein 
\emph on
Pull-Request
\emph default
 ist eine Anfrage an die Verwalter/Entwickler des ursprünglichen Repositories,
 von dem ein Fork erstellt wurde, die in der Anfrage enthaltenen Änderungen
 zu übernehmen.
\end_layout

\end_inset

 an das offizielle Repository übertragen.
\end_layout

\begin_layout Enumerate
Beim Erstellen des Pull-Requests werden die eigenen Simulationsergebnisse
 mit den Referenzergebnissen verglichen (siehe Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Vergleichskriterium"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Stimmen die Ergebnisse hinreichend gut überein, so gilt der Test als Bestanden
 und der Betreuer des offiziellen fmi-cross-check-Repositories übernimmt
 die Daten in die offizielle Struktur.
 Damit wird auch automatisch die Webseite mit dem FMI-Kompatibilitätslisten
 aktualisiert.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Vergleichskriterium"

\end_inset

Vergleichskriterium
\end_layout

\begin_layout Standard
Für den Vergleich zwischen Referenz- und Simulationsdaten wurde seitens
 des FMI-Konsortiums bewusst ein Test mit sehr großen Toleranzen gewählt.
 Fokus lag zunächst darauf, sicher zu stellen, dass die Tools nicht kompletten
 Unsinn ausrechnen und recht bald viele miteinander (im Prinzip) koppelbare
 Simulationsprogramme entstehen.
 Folgendes Vergleichskriterium wird verwendet:
\end_layout

\begin_layout Quotation

\emph on
\begin_inset Quotes gld
\end_inset

The provided import results are filtered against the reference solution
 provided by the exporter using the following epsilon band method:
\begin_inset Newline newline
\end_inset

Each reference signal is re-sampled (using linear interpolation) into an
 array of 1000 equally spaced samples between the first and last element
 of the reference time.
 The upper limit y_max of the epsilon band is calculated by taking the maximum
 of 21 neighboring values (10 to either side) at each sample point and adding
 10% of the absolute maximum of all values in the reference signal (or 0.5
 if all values are equal 0).
 The lower y_min is calculated respectively.
 The validation passes if at least 90% of the samples in the provided output
 are inside the epsilon band defined by y_min and y_max (again linearly
 interpolated at the respective sample time of the result file).
 Samples before and after the first and last sample time of the reference
 result will be ignored.
\begin_inset Quotes grd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
FMI-CROSS-CHECK-RULES.md
\family default
, 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/modelica/fmi-cross-check
\end_layout

\end_inset

, vom 02.08.2019
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dieses Akzeptanzband ist recht grob, funktioniert aber praktisch recht gut.
 Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Beispiel-für-Abgleich"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt einen Testfall, wobei Referenzergebnisse und MASTERSIM-Simulationsergebni
sse (unter Verwendung unterschiedlicher Parameter und Algorithmen) einschließlic
h des Toleranzbandes dargestellt werden.
\end_layout

\begin_layout Subsubsection
Nicht geprüfte Einflussfaktoren
\end_layout

\begin_layout Standard
Bei der Prüfung einzelner FMUs in einem Importprogramm können jedoch einige
 (wichtige) Aspekte nicht geprüft werden:
\end_layout

\begin_layout Itemize
Funktioniert der Masteralgorithmus, d.h.
 die 
\emph on
Koordination des Datenaustauschs zwischen mehreren FMUs
\emph default
 korrekt? 
\end_layout

\begin_layout Itemize
Werden die Algorithmus-Parameter und/oder eingebaute Konstanten und Verhaltensre
geln korrekt umgesetzt?
\end_layout

\begin_layout Itemize
Funktionieren fortgeschrittene FMU-Funktionen, wie das Rücksetzen oder Speichern
/Wiederherstellen des FMU-Zustands?
\end_layout

\begin_layout Itemize
Wie performant ist die jeweilige Master-Implementierung?
\end_layout

\begin_layout Standard
Für solche Tests müssen noch einige Fragestellungen geklärt werden:
\end_layout

\begin_layout Itemize
Wie ist das zu testende Co-Simulationsszenario definiert? Spielt die Reihenfolge
 der Auswertung bei mehreren FMUs eine Rolle?
\end_layout

\begin_layout Itemize
Wie ist der Vergleich mit den Ergebnisgrößen definiert? Wie wird mit Rundungsfeh
lern umgegangen? Woran erkennt man ein Fehlverhalten einer Implementierung?
\end_layout

\begin_layout Standard
Die Entwicklung solcher erweiterter Algorithmentests ist aktuell noch in
 Arbeit.
 Die Modultests vom MASTERSIM könnten hierbei als Vorlage dienen.
\end_layout

\begin_layout Subsection
Ausgangspunkt bei der Cross-Check Prüfung
\end_layout

\begin_layout Standard
Die MASTERSIM Version 0.5.3 vom September 2018 war Ausgangspunkt der Cross-Check-P
rüfung.
 In dieser Version waren die Modultests bereits für alle implementierten
 Algorithmen und die selbst erstellten FMUs erfolgreich absolviert worden.
 Eine erste Analyse ergab:
\end_layout

\begin_layout Itemize
FMI 1.0
\end_layout

\begin_deeper
\begin_layout Itemize
Win32 - 25 erfolgreich
\end_layout

\begin_layout Itemize
Win64 - 16 erfolgreich
\end_layout

\end_deeper
\begin_layout Itemize
FMI 2.0
\end_layout

\begin_deeper
\begin_layout Itemize
Win32 - 22 erfolgreich
\end_layout

\begin_layout Itemize
Win64 - 13 erfolgreich
\end_layout

\end_deeper
\begin_layout Standard
Anbetracht von derzeit 557 Test-FMUs alleine für die Win32 und Win64 Plattformen
, war die Kompatibilität des MASTERSIM-Tools in diesem Entwicklungsstand
 definitiv noch nicht zufriedenstellend.
\end_layout

\begin_layout Subsection
Ausschluss von FMUs
\end_layout

\begin_layout Standard
Wärend der Tests stellte sich heraus, dass einige FMUs nicht den Cross-Check-Reg
eln entsprachen.
 Insbesondere betraf dies diejenigen FMUs, welche ein lizensiertes Simulationspr
ogramm benötigten.
 Da diese Lizenz nicht bereitgestellt wurde, konnten diese FMUs nicht validiert
 werden und wurden aus der Liste der Test-FMUs entfernt (in der Übersicht
 in der Spalte 
\emph on
rejected
\emph default
 aufgeführt).
 Ebenso ausgeschlossen wurden FMUs, die im Repository mit der Datei 
\family typewriter
notCompliantWithLatestRules
\family default
 markiert wurden (d.h.
 nicht den aktuellen Cross-Check Regeln entsprechen).
\end_layout

\begin_layout Standard
Weiterhin gab es einige FMUs, die bezüglich des Simulationsendzeitpunkts
 eine strikte Prüfung implementiert haben.
 Diese ist nach aktueller Ansicht
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
siehe Diskussion in Ticket 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/modelica/fmi-standard/issues/575
\end_layout

\end_inset

.
\end_layout

\end_inset

 nicht standardkonform, jedoch der eventuell unterschiedlich auslegbaren
 Standardformulierung geschuldet.
 Hierfür konnte jedoch eine Speziallbehandlung in MASTERSIM integriert werden
 (siehe Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Überschreitung-des-Endzeitpunkts"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Automatisierung des Validierungsprozederes
\end_layout

\begin_layout Subsubsection
Schritte bei der Validierung ohne Skriptunterstützung
\end_layout

\begin_layout Standard
Zum Verständnis der nachfolgend erläuterten Automatisierung sollen kurz
 die Arbeitsschritte beim Validieren einer einzelnen FMU mittels MASTERSIM
 vorgestellt werden.
 Es wird hierzu als Beispiel der Testfall 
\emph on
CoupledClutches
\emph default
 ausgewählt.
\end_layout

\begin_layout Enumerate
Erstellen eines neuen MASTERSIM-Projekts 
\family typewriter
CoupledClutches_xc.msim
\family default
.
\end_layout

\begin_layout Enumerate
Bei diesem Testfall ist eine 
\family typewriter
CoupledClutches_in.csv
\family default
-Datei vorhanden, welche als erstes unter dem Namen 
\emph on
CoupledClutches_in
\emph default
 importiert wird.
\end_layout

\begin_layout Enumerate
Import der zu testenden FMU 
\family typewriter
CoupledClutches.fmu
\family default
 in das Projekt als 
\emph on
CoupledClutches.

\emph default
 Die MASTERSIM Programmoberfläche zeigt nun die importierten FMUs (Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ValidationProcess01"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/Screenshot_MSIM_ManualValidation_01.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ValidationProcess01"

\end_inset

Ansicht der importierten FMUs (Simulationsslaves)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate-Resume
Verknüpfung der Variablen der von der 
\family typewriter
csv
\family default
-Datei bereitgestellten Variablen mit den Eingangsvariablen in der Verknüpfungsa
nsicht.
 Bei sehr vielen Variablen kann das semi-automatisch durch die 
\begin_inset Quotes gld
\end_inset

Verknüpfe anhand gleicher Namen
\begin_inset Quotes grd
\end_inset

-Funktionalität erfolgen.
 Bei diesem Beispiel ist nur die Variable 
\begin_inset Formula $u$
\end_inset

 zu verknüpfen (Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ValidationProcess02"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/Screenshot_MSIM_ManualValidation_02.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ValidationProcess02"

\end_inset

Ansicht der verknüpften Variablen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate-Resume
In der Simulationsansicht (Solveroptionen) werden nun die Simulationzeiträume
 eingetragen.
 Diese sind in der Datei 
\family typewriter
CoupledClutches_ref.opt
\family default
 aufgeführt, welche den Inhalt hat:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

StartTime, 0.000000
\end_layout

\begin_layout Plain Layout

StopTime, 1.500000
\end_layout

\begin_layout Plain Layout

StepSize, 0.010000
\end_layout

\begin_layout Plain Layout

RelTol, 0.000100
\end_layout

\end_inset

Die Zeitangaben sind dabei in Sekunden.
\end_layout

\begin_layout Enumerate-Resume
Es wird als Master-Algorithmus 
\emph on
Gauss-Seidel
\emph default
, 
\emph on
1 Iteration
\emph default
, ausgewählt (nicht-iterierender Algorithmus)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bei der automatisierten Validierung wurde alternativ der Gauss-Jacobi Algorithmu
s ohne Iteration verwenden, da viele der anderen Tools offensichtlich diesen
 auch verwendet haben und so die Übereinstimmung größer war.
\end_layout

\end_inset

.
 Beim Gauss-Seidel-Algorithmus wird zuerst Variable der 
\family typewriter
csv
\family default
-Datei am Ende des Kommunikationsintervals ausgewertet und dann die Variable
 
\begin_inset Formula $u\left(t_{comm,end}\right)$
\end_inset

 an die FMU übergeben.
\end_layout

\begin_layout Enumerate-Resume
Die Option zur Zeitschrittweitenanpassung wird deaktiviert, da mit konstanten
 Kommunikationsschritten gerechnet werden soll.
\end_layout

\begin_layout Enumerate-Resume
Die in der Datei 
\family typewriter
CoupledClutches_ref.csv
\family default
 bereitgestellten Ergebnisgrößen sind interne bzw.
 lokale Variablen.
 Da MASTERSIM standardmäßig nur Ausgabevariablen (causality=output) in Ausgabeda
teien schreibt, muss die Option 
\begin_inset Quotes gld
\end_inset

Schreibe interne Variablen als Ausgaben
\begin_inset Quotes grd
\end_inset

 eingeschaltet werden.
\end_layout

\begin_layout Enumerate-Resume
Als Ausgabeinterval (
\family typewriter
hOutputMin
\family default
) wird 0,01 s gewählt, also eine Ausgabe je Kommunikationsinterval.
 Bei Co-Simulationsanwendungen ist dieses Ausgabeinterval entscheidend,
 da eine Ausgabe der Variablen nach jedem Kommunikationsschritt zu unnötig
 großen Ausgabedateien führen würde.
 Daher wird diese Interval als Raster für Ausgaben definiert, d.h.
 es wird nach jeder erfolgten Ausgabe der nächste Ausgaberaster-Zeitpunkt
 bestimmt und erst nach Erreichen/Überschreiten dieses Ausgabezeitpunkts
 wird eine weitere Ausgabe erlaubt.
 Beispielsweise kann so die Zeitintegration mit Schrittlängen 0,001 s durchgefüh
rt werden, wohingegen Ausgaben nur alle 0,1 s erfolgen.
 Die Umsetzung dieser Regel birgt jedoch zahlreiche Fehlerquellen, wie in
 den Abschnitten
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Ausgabe-enden-vor-Endzeitpunkt"
plural "false"
caps "false"
noprefix "false"

\end_inset

 bis
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Ausgabe-überspringt-Zeitpunkte"
plural "false"
caps "false"
noprefix "false"

\end_inset

 erläutert ist.
\end_layout

\begin_layout Enumerate-Resume
Nachdem alle Simulationseinstellungen eingetragen wurden (siehe Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ValidationProcess03"
plural "false"
caps "false"
noprefix "false"

\end_inset

) kann die Berechnung gestartet werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/Screenshot_MSIM_ManualValidation_03.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ValidationProcess03"

\end_inset

Angepasste Simulationsoptionen für den 
\emph on
CoupledClutches
\emph default
 Testfall
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate-Resume
Die Analyse der Übereinstimmung kann zunächst visuell im Post-Processing
 erfolgen.
 Dazu wird das Post-Proc gestartet, und Beispielsweise die Referenzergebnisse
 
\emph on
clutch1.psi_rel
\emph default
 und 
\emph on
clutch1.w_rel
\emph default
 zusammen mit den berechneten Werten dargestellt (siehe Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ValidationProcess04"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/Screenshot_MSIM_ManualValidation_04.pdf
	width 8cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ValidationProcess04"

\end_inset

Vergleich der Referenzergebnisse (durchgezogene Linien) und Simulationsergebniss
e (Symbole).
 Die Abweichungen sind bei den gewählten Simulationseinstellungen sehr klein.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate-Resume
Nun muss man eine 
\family typewriter
csv
\family default
-Datei erstellen, die die gleichen Variablen wie die Datei 
\family typewriter
CoupledClutches_ref.csv
\family default
 enthält.
 Dazu muss man die Ergebnisdatei 
\family typewriter
values.csv
\family default
 von MASTERSIM in eine Tabellenkalkulation (LibreOffice, Excel, ...) einlesen.
 Falls Referenzvariablen nicht in den Berechnungsergebnissen enthalten sind,
 handelt es sich um synonyme Variablen, d.h.
 Variablen mit gleichem Wert.
 Die jeweils entsprechende Ausgabespalte kann man mithilfe der von MASTERSIM
 generierten Datei 
\family typewriter
synonymous_variables.txt
\family default
 suchen und entsprechend umbenennen.
 Dann enfernt man alle Spalten, welche nicht Teil der geforderten Referenzergebn
isse sind.
 Die Reihenfolge der einzelnen Spalten ist ohne Bedeutung, sodass man die
 nun bereinigte Ergebnisdatei unter dem Namen 
\family typewriter
CoupledClutches_out.csv
\family default
 speichern kann.
\end_layout

\begin_layout Enumerate-Resume
In der lokalen Arbeitskopie des eigenen Forks des fmi-cross-check-Repositories
 legt man nun das Verzeichnis
\begin_inset Newline newline
\end_inset


\family typewriter
results/1.0/cs/linux64/MasterSim/0.7.0/JModelica.org/1.15/CoupledClutches
\family default
 an (bzw.
 jeweils angepasst and Plattform und FMI Version) und kopiert die Datei
 
\family typewriter
CoupledClutches_out.csv
\family default
 hinein.
 Zudem erstellt man noch eine Datei 
\family typewriter
passed
\family default
 (z.B.
 mit der Versionsnummer von MASTERSIM) und 
\family typewriter
README.md
\family default
, wobei man in letztere sinnvollerweise die MASTERSIM Projektdatei kopiert,
 sodass man später die Werte reproduzieren kann.
\end_layout

\begin_layout Enumerate-Resume
Nun führt man das offizielle Prüfskript des fmi-cross-check-Repositories
 aus, d.h.
 ein Python-Programm, welches die neuen Ergebnisdateien mit den Referenzergebnis
sen unter Verwendung des Toleranzbandes vergleicht.
 Ggfs.
 entfernt das Skript die 
\family typewriter
passed-
\family default
Datei bei zu großen Abweichungen wieder und gibt dabei Fehlermeldungen aus.
\end_layout

\begin_layout Enumerate-Resume
Ist die Prüfung erfolgreich abgeschlossen, werden die 3 neuen Dateien in
 das Repository übertragen (via git commit und push) und ein pull-Request
 ausgelöst.
\end_layout

\begin_layout Subsubsection
Skript-Automatisierung
\end_layout

\begin_layout Standard
Es ist offensichtlich, dass das manuell Durchführen obiger Arbeitsschritte
 für jeden der über 800 Testfälle nicht praktikabel ist.
 Glücklicherweise lassen sich viele Schritte sinnvoll automatisieren.
 Dies erfolgt im wesentlichen durch 2 selbst entwickelte Python-Skripte:
\end_layout

\begin_layout Enumerate
Generieren der MASTERSIM-Projektdateien
\end_layout

\begin_layout Enumerate
Ausführen der Simulation, Prüfung der Abweichungen zwischen Referenzwerten
 und Simulationsergebnissen, Anlegen der Veröffentlichungsdateien für alle
 bestandenen Testfälle.
\end_layout

\begin_layout Standard
Nach Ausführen der beiden Skripte muss man nur noch das offizielle Prüfskript
 starten, eventuell aufgezeigte Fehler beheben und die Ergebnisse veröffentliche
n.
 Auf diese Art und Weise lassen sich in relativ kurzer Zeit sehr viele FMUs
 testen.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Skript-zur-Generierung"

\end_inset

Skript zur Generierung von MASTERSIM-Projektdateien
\end_layout

\begin_layout Standard
Die Generierung der Projektdateien wird mittels Python-Skripten wie folgt
 automatisiert:
\end_layout

\begin_layout Itemize
Einlesen der Verzeichnisstruktur und bestimmen einer Liste von FMUs zum
 Testen,
\end_layout

\begin_layout Itemize
Filtern der Liste nach Co-Simulations-FMUs, ausgewähltem Tool/Hersteller,
 Plattform (Filterkriterien werden dem Skript als Kommandozeilenargumente
 übergeben),
\end_layout

\begin_layout Standard
Für jeden verbleibenden Testfall werden nun MASTERSIM Projektdateien erstellt,
 dabei werden:
\end_layout

\begin_layout Itemize
Für jeden Testfall ein entsprechendes Testverzeichnis generiert,
\end_layout

\begin_layout Itemize
Pfade zur FMU-Datei und ggfs.
 zur 
\family typewriter
<fmu>_in.csv
\family default
 eingetragen,
\end_layout

\begin_layout Itemize
Verknüpfungsgraph zwischen Variablen aus der 
\family typewriter
<fmu>_in.csv
\family default
 und der FMU erstellt,
\end_layout

\begin_layout Itemize
Datei 
\family typewriter
<fmu>_ref.csv
\family default
 mit Referenzergebnissen in das Testverzeichnis kopiert,
\end_layout

\begin_layout Itemize

\family typewriter
tStart = StartZeit
\family default
 aus der Datei 
\family typewriter
<fmu>_ref.opt
\family default
 gesetzt,
\end_layout

\begin_layout Itemize

\family typewriter
tStop = StopZeit
\family default
 aus der Datei 
\family typewriter
<fmu>_ref.opt
\family default
 gesetzt,
\end_layout

\begin_layout Itemize

\family typewriter
hStart = StepSize
\family default
 aus der Datei 
\family typewriter
<fmu>_ref.opt
\family default
 gesetzt, bzw.
 falls 
\family typewriter
StepSize
\family default
 = 0, auf (
\family typewriter
StopZeit-StartZeit
\family default
)/1000 gesetzt, und
\end_layout

\begin_layout Itemize

\family typewriter
hOutputMin
\family default
 automatisch gesetzt auf (
\family typewriter
StopZeit-StartZeit
\family default
)/100.
\end_layout

\begin_layout Subsubsection
Skript zur Simulation und Auswertung
\end_layout

\begin_layout Subsection
Erkannte Probleme und Lösungen
\end_layout

\begin_layout Standard
Nachfolgend sind die beim Testen aufgetretenen Probleme und Fehler in der
 chronologischen Reihenfolge beschrieben, wie sie aufgetreten sind und behoben
 wurden.
\end_layout

\begin_layout Subsubsection
MASTERSIM übergibt das falsche 
\begin_inset Quotes gld
\end_inset

Resources
\begin_inset Quotes grd
\end_inset

-Verzeichnis bei FMI 1.0
\end_layout

\begin_layout Standard
FMUs verweigern die Initialisierung, da das übergebene 
\emph on
Resources
\emph default
-Verzeichnis nicht existiert.
 Hintergrund ist eine Änderung des Verzeichnisses zwischen FMI 1.0 und FMI
 2.0.
 MASTERSIM unterstützte bislang nur die FMI 2.0 Konvention.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM erhält eine FMI-versionsspezifische Regelung für die Generierung
 des 
\emph on
Resources
\emph default
-Verzeichnisses.
\end_layout

\begin_layout Subsubsection
MASTERSIM bricht mit Fehlermeldung 
\family typewriter

\begin_inset Quotes gld
\end_inset

variability
\family default
 Attribut fehlt
\begin_inset Quotes grd
\end_inset

 ab.
\end_layout

\begin_layout Standard
MASTERSIM bricht beim Einlesen der modelDescription.xml-Datei bestimmter
 FMUs ab, und verlangt das Attribut 
\family typewriter
variability
\family default
 bei allen Variablen.
 Im Standard ist dieses Attribut jedoch nicht als notwendiges Attribut aufgeführ
t und ein Standardwert angegeben.
\end_layout

\begin_layout Standard

\emph on
Lösung: 
\emph default
MASTERSIM wird standardkonform angepasst und verwendet 
\family typewriter
continuous
\family default
 als Standardwert für das Attribut 
\family typewriter
variability.
\end_layout

\begin_layout Subsubsection
MASTERSIM hängt beim Schreiben der Ausgaben
\end_layout

\begin_layout Standard
Ursache: 
\family typewriter
hOutputMin = 0 s
\family default
 ist in der Projektdatei gesetzt.
 In der gegebenen Referenzergebnisdatei sind identische Zeitpunkte gegeben,
 entweder wegen Unstetigkeiten (2 Werte beim gleichen Zeitpunkt) oder durch
 Rundungsfehler beim Schreiben der Zeitpunkte.
 Ursache ist die automatische Generierung der MASTERSIM-Projektdateien (siehe
 Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Skript-zur-Generierung"
plural "false"
caps "false"
noprefix "false"

\end_inset

), welches ursprünglich den minimalen zeitlichen Abstand zweier Referenzergebnis
se für 
\family typewriter
hOutputMin
\family default
 verwendet hat.
\end_layout

\begin_layout Standard

\emph on
Lösung: 
\emph default
MASTERSIM wird angepasst und führt nun Fehlerprüfung durch.
 Generierungsskript wird angepasst und ignoriert Zeilen mit identischen
 Zeitpunkten bei der Ausgaberasterbestimmung.
 Später wird die Ausgabefrequenz ausschließlich in Abhängigkeit des Simulationsz
eitraums bestimmt.
\end_layout

\begin_layout Subsubsection
MASTERSIM hängt bei der Simulation, wenn 
\family typewriter
hStart = 0 s
\family default
 gegeben ist.
\end_layout

\begin_layout Standard
Ursache ist der Parameter 
\family typewriter
StepSize = 0
\family default
 in der
\family typewriter
 <fmu>_ref.opt
\family default
-Datei.
\end_layout

\begin_layout Standard

\emph on
Lösung: 
\emph default
MASTERSIM wird erweitert und berechnet standardmäßig einen Zeitschritt von
 
\begin_inset Formula $h=\left(t_{End}-t_{Start}\right)/1000$
\end_inset

, wenn 
\family typewriter
hStart = 0 s
\family default
 in der Projektdatei steht.
\end_layout

\begin_layout Subsubsection
MASTERSIM bricht mit Fehlermeldung 
\begin_inset Quotes gld
\end_inset

Cannot import function
\begin_inset Quotes grd
\end_inset

 ab
\end_layout

\begin_layout Standard
Bei der Instanzierung einer FMU bricht MASTERSIM mit der Fehlermeldung 
\family typewriter
Cannot import function 'van der Pol oscillator_fmiGetReal' from shared/dynamic
 library
\family default
 ab.
\end_layout

\begin_layout Standard

\emph on
Ursache:
\emph default
 MASTERSIM liest das Attribut 
\emph on
ModelName
\emph default
 mit Wert 
\emph on
van der Pol
\emph default
 und generiert daraus den Symbolnamen
\family typewriter
'van der Pol oscillator_fmiGetReal'
\family default
.
 Eine Analyse der von der FMU-shared library exportierten Symbole ergibt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> nm VanDerPol.so
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

000000000000305f T VanDerPol_fmiGetIntegerStatus
\end_layout

\begin_layout Plain Layout

00000000000027d1 T VanDerPol_fmiGetReal
\end_layout

\begin_layout Plain Layout

0000000000002df5 T VanDerPol_fmiGetRealOutputDerivatives
\end_layout

\begin_layout Plain Layout

0000000000003034 T VanDerPol_fmiGetRealStatus
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Symbolnamen müssten aus dem 
\emph on
ModelIdentifier
\emph default
 mit Wert 
\emph on
VanDerPol
\emph default
 gebildet werden, welches so auch im Standard beschrieben ist (bei anderen
 FMUs ist meist ModelName = ModelIdentifier, weswegen das dort nicht aufgefallen
 ist).
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM wird entsprechend standardkonform angepasst.
\end_layout

\begin_layout Subsubsection
MASTERSIM schreibt Ergebnisse nicht im CSV-Format
\end_layout

\begin_layout Standard
Das bisher von MASTERSIM verwendete DataIO Format ist für die automatische
 Analyse und Abgleich nicht geeignet.
\end_layout

\begin_layout Standard

\emph on
Lösung: 
\emph default
Die Ausgabedateien werden auf 
\family typewriter
csv
\family default
-Format umgestellt, wobei Zeichenketten in der Datei 
\family typewriter
string.csv
\family default
 ausgegeben werden und alle anderen Werte (Integer, boolische Werte und
 Gleitkommazahlen) in die Datein 
\family typewriter
values.csv
\family default
 geschrieben werden.
\end_layout

\begin_layout Subsubsection
Referenzergebnisse nicht automatisierbar auswertbar
\end_layout

\begin_layout Standard
In den Referenzergebnissen wird die Zeitspalte ohne Einheit und mal als
 
\begin_inset Quotes gld
\end_inset

time
\begin_inset Quotes grd
\end_inset

 oder 
\begin_inset Quotes gld
\end_inset

Time
\begin_inset Quotes grd
\end_inset

 beschriftet.
 Für die automatisierte Auswertung ist das nicht geeignet.
\end_layout

\begin_layout Standard

\emph on
Lösung: 
\emph default
Die Referenzergebnisdateien werden verlustfrei in das geforderte 
\family typewriter
csv
\family default
-Format konvertiert.
\end_layout

\begin_layout Subsubsection
Ausgabefrequenz nicht hoch genug, bzw.
 Schrittweite zu groß
\end_layout

\begin_layout Standard
Beim Vergleich von Ergebniswerten mit Referenzergebnissen gibt es Abweichungen,
 welche durch Verwendung kleinerer Kommunikationsschrittweite reduziert
 werden können.
 Probleme gibt es jedoch beim Auftreten von Sprungstellen, da MASTERSIM
 je Simulationszeitpunkt stehts nur ein Ergebnis hat.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 Die Kommunikationsschrittweite wird reduziert, bis eine hinreichende Übereinsti
mmung der Ergebnisse erreicht wird (falls möglich).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Ausgabe-enden-vor-Endzeitpunkt"

\end_inset

Ausgabe enden vor Simulationsende (Rundungsproblematik 1)
\end_layout

\begin_layout Standard
Das offizielle fmi-cross-check-Verifizierungsskript beklagt, dass die Simulation
sergebnisdatei vor dem Simulationsendzeitpunkt endet, teilweise mit der
 unsinnigen Fehlermeldung 
\begin_inset Quotes gld
\end_inset

Ausgaben enden zum Zeitpunkt 1,6 obwohl die Simulation bis 1,6 läuft
\begin_inset Quotes grd
\end_inset

.
 Ursache ist eine Rundungsproblematik, die dazu führt, dass z.B.
 die Simulation bereits bei 1,599999 beendet wird, obwohl als Endzeitpunkt
 1,6 verlangt ist.
 Dies liegt an Rundungseffekten, wenn z.B.
 Zeitschritte der Länge 0,001 vielfach aufeinanderaddiert werden.
 Um dieser Rundungsproblematik zu begegnen wurde bislang die Simulation
 beendet, wenn 
\begin_inset Formula $t_{End}-t<10^{-6}$
\end_inset

 war.
 Zudem hat MASTERSIM bislang Ausgabezeitpunkte mit 10 Stellen Genauigkeit
 ausgegeben, welches in der Datei zu der Zahl 1,599999 geführt hat.
 Das Verifizierungsskript hat dann diese Zahlen verglichen und einen Fehler
 erkannt.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 Die Genauigkeit der Zeitpunktausgaben in den MASTERSIM Ausgabedateien wurde
 auf Standardgenauigkeiten (7 signifikante Stellen) reduziert.
 Damit hatte die letzte Ausgabe den Zeitpunkt 1,6 und wurden als korrekt
 akzeptiert.
\end_layout

\begin_layout Subsubsection
Keine Ausgabe beim Endzeitpunkt (Rundungsproblematik 2)
\end_layout

\begin_layout Standard
In einzelnen Fällen ist die Situation eingetreten, dass der Simulationszeitraum
 nicht exakt ein Vielfaches der Kommunikationsschrittweite war, z.B.
 
\begin_inset Formula $t_{End}=1,667$
\end_inset

 und 
\family typewriter
hOutputMin
\family default
 = 0,002.
 In diesem Fall war die letzte Ausgabe bei t=1,666.
 Bei Simulationsende t=1,667 war das Mindestinterval für Ausgaben von 0,002
 noch nicht abgelaufen, weswegen keine Ausgaben geschrieben wurden.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM wird erweitert und schreibt nun am Simulationsende in jedem Fall
 die Ergebnisse.
\end_layout

\begin_layout Subsubsection
Letzte Ausgabe doppelt in Ausgabedatei (Rundungsproblematik 3)
\end_layout

\begin_layout Standard
Eine Sonderbehandlung war notwendig, dass nicht unbeabsichtigterweise nach
 dem letzten Rechenschritt eine planmäßige Ausgabe erstellt wird, gefolgt
 von der gleichen Ausgabe am Ende der Berechnung.
 Dies trat z.B.
 auf, wenn der letzte Integrationsschritt bei t=2,0 endete, der nächste
 Ausgabezeitpunkt ebenfalls bei t=2,0 gesetzt war.
 Wenn dann zusätzlich noch die Ausgabe am Simulationsende angehängt wurde,
 erschien die Ausgabe zum Zeitpunkt t=2,0 doppelt.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 Erweiterter Test integriert, um Zeitpunkt der letzten Ausgabe zusätzlich
 zu prüfen.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Ausgabe-überspringt-Zeitpunkte"

\end_inset

Ausgabe überspringt Zeitpunkte (Rundungsproblematik 4)
\end_layout

\begin_layout Standard
Ein weiteres Problem in Zusammenhang mit der Rundung von Zeitschritten zeigte
 sich darin, dass zum Teil Ausgabezeitpunkte übersprungen wurden.
 Dies lag daran, dass MASTERSIM intern den jeweils nächsten erlaubten Ausgabezei
tpunkt dadurch berechnete, dass 
\family typewriter
hOutputMin
\family default
 so oft addiert wurde, bis t < 
\family typewriter
hOutputMin
\family default
 und dieser Zeitpunkt dann als nächster erlaubter Zeitpunkt festgelegt wurde.
 Allerdings tritt hier wieder die Situation ein, dass durch Rundungsfehler
 eine Bedingung wie bspw.
 1,1000000001 <= 1,1 nicht gilt und deshalb eine Ausgabe übersprungen wird.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM merkt sich nun den Zeitpunkt der letzten Ausgabe und bestimmt
 die Differenz zwischen aktuellem Zeitpunkt und Ausgabezeitpunkt zusätzlich
 zum Ausgaberaster.
\end_layout

\begin_layout Subsubsection
Unterstützung für CSV-Eingabedaten (FileReader-Slaves)
\end_layout

\begin_layout Standard
Während die meisten FMUs ohne externe Eingabedateien erfolgreich getestet
 werden konnen, gibt es auch zahlreiche Testfälle (wie z.B.
 der oben beschriebene CoupledClutches-Test), welche Eingangsvariablen in
 
\family typewriter
csv
\family default
-Dateien bereitstellen.
 Diese müssen gelesen werden und zur Laufzeit müssen die tabellierten Variablenw
erte durch lineare Interpolation berechnet werden.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM wird erweitert, sodass neben FMU-Slaves auch FileReader-Slaves
 verwendet werden können.
 Beide Implementierungen teilen einen gemeinsame Schnittstelle, wodurch
 der Großteil der MASTERSIM-Implementierung unverändert bleibt.
 FileReader-Slaves lesen bei der Instanzierung die jeweilige 
\family typewriter
csv
\family default
-Datei ein und generieren eine virtuelle 
\family typewriter
modelDescription.xml
\family default
 Datenstruktur und Zugriffsfunktionen auf die bereitgestellten Variablen
 (einschließlich der linearen Interpolation).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Überschreitung-des-Endzeitpunkts"

\end_inset

Überschreitung des Endzeitpunkts verhindern
\end_layout

\begin_layout Standard
Einige FMUs verhalten sich hinsichtlich des Überschreitens des Endzeitpunkts
 nicht standardkonform und brechen die Simulation im letzten Integrationsschritt
 ab.
 Dies tritt z.B.
 dann auf, wenn der letzte Kommunikationsschritt von 1,9 bis 2,0 geht, jedoch
 die Addition von 1,9 und 0,1 mit Maschinenzahlen einen Wert von 2,000000001
 ergibt.
 In diesem Fall sollte die FMU keinen Fehler ausgeben.
 Einige FMUs prüfen den Endzeitpunkt jedoch sehr strikt und brechen die
 Simulation mit einem Fehler ab.
\end_layout

\begin_layout Standard

\emph on
Lösung:
\emph default
 MASTERSIM erhält eine zusätzliche Option, um notfalls den letzten Zeitschritt
 exakt so zu kürzen, dass tatsächlich der Simulationsendzeitpunkt 
\emph on
exakt
\emph default
 erreicht wird.
\end_layout

\begin_layout Subsection
Zusammenfassung des Cross-Check-Validierungsstandes für MASTERSIM Version
 0.7
\end_layout

\begin_layout Standard
Nach umfangreicher Anpassung und Korrektur von MASTERSIM war in der Version
 0.7 nun eine recht umfängliche Validierung der Testfälle möglich.
 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stand-der-Cross-Check-Validierun"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt eine Übersicht der Validierungsergebnisse für die getesteten Plattformen
 Windows 64bit, Linux 64bit, und MacOS (Darwin) 64bit.
 Die Validierung der 32-bit Windows-Version ist für diese Programmversion
 ausgelassen worden, da dieses Betriebssystem einer immer geringere Verbreitung
 aufweist.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/MasterSim_0.7.1_cross-check_results.pdf
	width 16cm
	BoundingBox 2cm 7.5cm 19cm 19cm
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Stand-der-Cross-Check-Validierun"

\end_inset

Stand der Cross-Check-Validierung von MASTERSIM Version 0.7
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die meisten fehlgeschlagenen Tests sind begründet mit einer noch verbleibenden
 Einschränkung im MASTERSIM: die durch 
\family typewriter
csv
\family default
-Eingabedateien bereitgestellten Variablen werden derzeit als vom Datentyp
 
\emph on
Real
\emph default
 angenommen und stets linear interpoliert.
 Bei den Testfällen, wo diese Variablen mit Integervariablen oder boolischen
 Variablen verknüpft sind, scheitert die Berechnung.
 Aktuell könnten diese FMUs durch Einsatz von Adaptor-FMUs dennoch validiert
 werden, in denen eine entsprechende Typkonvertierung möglich ist.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Beispiel-für-Abgleich"

\end_inset

Beispiel für Abgleich zwischen Simulationsergebnissen und Referenzwerten
\end_layout

\begin_layout Standard
Nachfolgend soll beispielhaft anhand von einzelnen Testfällen gezeigt werden,
 wie unterschiedlich die Berechnungsergebnisse verschiedener Tools im Vergleich
 zu den Referenzwerten ausfallen können, und wie breit das Toleranzband
 in diesem Fall gesetzt ist.
 
\end_layout

\begin_layout Subsubsection
Beispiel-Testfall: ControlledTemperature
\end_layout

\begin_layout Standard
Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt die Referenzergebnisse des Testfalls 
\family typewriter
2.0/cs/linux64/MapleSim/2016.1/ControlledTemperature
\family default
, die daraus abgeleiteten oberen und unteren Grenzen des Toleranzbandes
 und die Ergebnisse der Tools, welche diesen Test bestanden haben.
 Es schein eine recht gute Übereinstimmung der Berechnungsergebnisse zu
 geben.
 Man kann in der Abbildung aber auch sehen, dass das Toleranzband sehr breit
 ist.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/ControlledTemperatureWithToleranzBand.pdf
	width 12cm
	BoundingBox 0bp 0bp 454bp 340bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example1"

\end_inset

Vergleich Referenzergebnisse mit Simulationsergebnissen des Testfalls 
\emph on
ControlledTemperature
\emph default
 und Darstellung des Toleranzbandes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bei Detailbetrachtung (siehe Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example1-Detail"
plural "false"
caps "false"
noprefix "false"

\end_inset

) fallen bereits kleinere Abweichungen in einem FMI-Importtool auf, welche
 auf ein nicht ganz korrektes Verhalten des Importtools zurückzuführen sind.
 Diese können aber aufgrund des breiten Toleranzbandes so nicht entdeckt
 werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/ControlledTemperatureWithToleranzBandZoom.pdf
	width 12cm
	BoundingBox 0bp 0bp 454bp 340bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example1-Detail"

\end_inset

Detailbetrachtung der Berechnungsergebnisse mit Abweichungen im Ergebnis
 des Adams-Solvers, welche durch das breite Toleranzband nicht erkannt werden.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Beispiel-Testfall: Fuelrail
\end_layout

\begin_layout Standard
Die recht großzüge Wahl des Toleranzbandes kann jedoch auch dazu führen,
 dass die Details der Berechnungsergebnisse komplett irrelevant für die
 Bewertung werden.
 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example2-Detail"
plural "false"
caps "false"
noprefix "false"

\end_inset

 zeigt einen solchen Extremfall, im Testfall 
\family typewriter
2.0/cs/linux64/AMESim/15/fuelrail_cs
\family default
.
 Glücklicherweise liegen bei diesem Testfall alle Ergebnisse sehr gut übereinand
er - jedoch würde in diesem Fall auch ein komplett falsches Ergebnis, z.B.
 ein konstanter Wert von 0, als validiert gelten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename fig/fuelrail_cs.pdf
	width 12cm
	BoundingBox 0bp 0bp 454bp 340bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example2-Detail"

\end_inset

Extrembeispiel für ein zu großes Toleranzband.
 Der Verlauf der hochfrequenten Modellreaktion im Inneren der Toleranzhülle
 hat keinerlei Einfluss auf die Validierungsbewertung.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aus diesem Testfall wird deutlich, dass das Verfahren mit dem gleitenden
 Mittel zur Bestimmung des Toleranzbandes nur bedingt für die automatische
 Prüfung geeignet ist.
 Wahrscheinlich wäre es zielführender, wenn der Ersteller eines Testfalls
 die Genauigkeit des Toleranzbandes selbst kontrolliert, und gegebenefalls
 über die Ausgabefrequenz anpasst.
\end_layout

\begin_layout Subsection
Eigene Bewertungskriterien für die MASTERSIM-Validierung
\end_layout

\begin_layout Standard
Wie oben dargestellt, sind die Kriterien für die Cross-Check-Validierung
 recht grob gesteckt, und erlauben daher zum Teil auch inkorrekte Ergebnisse
 die Tests zu bestehen.
\end_layout

\begin_layout Standard
Für die Validierung von MASTERSIM wurde deshalb zusätzlich ein eigenes Prüfkrite
rium eingebaut, welches auch dazu dient, die optimalen Kommunikationsschrittläng
en und Ausgabefrequenzen zu bestimmen.
 Dafür wird eine gewichtete Vektornorm (WRMS-Norm, engl.
 
\emph on
weighted-root-mean-square
\emph default
 Norm) zwischen Referenzergebnissen und Berechnungsergebnissen im MASTERSIM
 berechnet.
 Die erstellte README.md-Datei enthält dann für alle Referenzvariablen die
 selbst berechnete Norm in der Form:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WRMS(p1@general_hydraulic_chamber) = 2.88624153058
\end_layout

\begin_layout Plain Layout

WRMS(p1@hydraulic_4) = 2.38231879683
\end_layout

\begin_layout Plain Layout

WRMS(q@volumesensor) = 6.45486466337
\end_layout

\end_inset


\end_layout

\begin_layout Standard
wobei Werte < 100 eine gute Übereinstimmung signalisieren.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "/home/ghorwin/svn/mastersim-code/doc/articles/Literature"
options "bibtotoc,plaindin"

\end_inset


\end_layout

\end_body
\end_document
