#include "IBK_FluidPhysics.h"

#include "IBK_assert.h"

#include <cmath>
#include <algorithm>

/*! Reynolds number where flow switches from laminar to transition state for a pipe. */
#define RE_LAMINAR		2300.0	///< VDI Wärmeatlas 11. Auflage  G1 1

/*! Reynolds number where flow switches from transition state to turbulent for a pipe.*/
#define RE_TURBULENT	10000.0	///< VDI Wärmeatlas 11. Auflage G1 1

namespace IBK {

double FrictionFactorSwamee(double reynolds, double d, double roughness) {
	// pure laminar flow
	if (reynolds < RE_LAMINAR)
		return 64.0/reynolds;

	// flow in transition area
	if (reynolds < RE_TURBULENT){
		double fLam = 64.0/RE_LAMINAR; // f(RE_LAMINAR)
		double fTurb = std::log10((roughness / d) / 3.7 + 5.74 / std::pow(RE_TURBULENT, 0.9) );
		fTurb = 0.25/(fTurb*fTurb); // f(RE_TURBULENT)
		// now interpolate linearly between fLam and fTurb
		return fLam + (reynolds - RE_LAMINAR) * (fTurb - fLam) / (RE_TURBULENT - RE_LAMINAR);
	}

	// pure turbulent flow
	double f = std::log10( (roughness / d) / 3.7 + 5.74 / std::pow(reynolds, 0.9) ) ;
	return	0.25 / (f*f);
}


double NusseltNumber(double reynolds, double prandtl, double l, double d) {
	// pure laminar flow
	if (reynolds < RE_LAMINAR)
		return NusseltNumberLaminar(reynolds, prandtl, l, d);

	// flow in transition area
	if (reynolds < RE_TURBULENT){
		double nuLam = NusseltNumberLaminar(RE_LAMINAR, prandtl, l, d);
		double nuTurb = NusseltNumberTurbulent(RE_TURBULENT, prandtl, l, d);
		double gamma = (reynolds - RE_LAMINAR) / (RE_TURBULENT - RE_LAMINAR);
		return nuLam * (1.0 - gamma) + nuTurb * gamma;
	}

	// pure turbulent flow
	return NusseltNumberTurbulent(reynolds, prandtl, d, l);
}


double NusseltNumberTurbulent(double reynolds, double prandtl, double l, double d) {
	IBK_ASSERT(reynolds > 0);

	// Equation 25, VDI-Wärmeatlas (11. Auflage), Kapitel B2, Page 28
	double p1 = 1.8 * std::log10(reynolds) - 1.5;
	double zeta = 1.0 / p1 / p1;
	const double exp = 2.0/3.0;
	const double zeta_8 =  zeta / 8.;
	const double lengthFact = 1. + std::pow(d / l, exp);
	const double z1 = zeta_8 * reynolds*prandtl;
	const double z2 = 1. + 12.7 * std::sqrt(zeta_8) * (std::pow(prandtl, exp) - 1.);
	return z1 / z2 * lengthFact;
}


double NusseltNumberLaminar(double reynolds, double prandtl, double l, double d) {
	if (reynolds <=0)
		return 3.66; // for velocity=0

	return std::pow( 49.37 + std::pow(1.615 * std::pow(reynolds * prandtl * d/l, 1.0/3.0) - 0.7, 3.0) , 1.0/3.0);
}


double PrandtlNumber(double kinVis, double cp, double lambda, double rho) {
	return kinVis * cp * rho / lambda;
}


double ReynoldsNumber(double v, double kinVis, double d) {
	return  v * d / kinVis;
}

double SurfaceTransmission(double nusselt, double lambda, double di) {
	const double hp = nusselt * lambda / di;
	return hp > 10000 ? 10000. : hp;
}

// Water properties class

WaterMixProperties::WaterMixProperties(double glycolContent, GlycolKind glycolKind) :
	m_glycolContent(glycolContent),
	m_glycolKind(glycolKind)
{
	m_freezeTemperature[static_cast<int>(GK_Ethylene)].setValues(std::vector<double>{0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
								  std::vector<double>{0, -3, -8, -16, -26, -38, -53});

	m_freezeTemperature[static_cast<int>(GK_Propylene)].setValues(std::vector<double>{0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
								  std::vector<double>{0, -2, -6, -12, -22, -34, -49});

	m_densities[static_cast<int>(GK_Ethylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						 {999.84,999.9,999.94,1000,1000,1000,999.94,999.9,999.85,999.78,999.7,999.61,999.5,999.38,999.25,999.1,998.94,998.78,998.6,998.41,998.21,997.77,997.3,997.05,996.79,996.24,995.65,995.03,994.38,993.69,992.97,992.22,991.44,990.64,989.8,988.94,988.05,985.71,983.21,980.57,977.78,974.86,971.8,968.62,965.32,961.89}},
						{{-3,-1,1,3,5,7,9,11,13,15,17,19},{1019,1018,1018,1017,1016,1016,1015,1014,1013,1013,1012,1011}},
						{{-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{1039,1038,1037,1037,1036,1035,1034,1033,1033,1032,1031,1030,1029,1028,1028}},
						{{-16,-11,-6,-1,4,9,14,19},{1060,1058,1056,1054,1051,1049,1047,1044}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1079,1077,1074,1072,1070,1067,1065,1062,1060}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1096,1094,1091,1089,1086,1083,1081,1078,1075}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1113,1110,1107,1104,1102,1099,1096,1093,1090}}
					}
					);

	m_densities[static_cast<int>(GK_Propylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{999.84,999.9,999.94,1000,1000,1000,999.94,999.9,999.85,999.78,999.7,999.61,999.5,999.38,999.25,999.1,998.94,998.78,998.6,998.41,998.21,997.77,997.3,997.05,996.79,996.24,995.65,995.03,994.38,993.69,992.97,992.22,991.44,990.64,989.8,988.94,988.05,985.71,983.21,980.57,977.78,974.86,971.8,968.62,965.32,961.89}},
						{{-2,0,2,4,6,8,10,12,14,16,18,20},{1010,1010,1009,1009,1008,1008,1007,1007,1006,1005,1005,1004}},
						{{-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{1027,1026,1025,1024,1024,1023,1022,1021,1021,1020,1019,1018,1018,1017}},
						{{-12,-7,-2,3,8,13,18},{1043,1040,1038,1036,1034,1031,1029}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1060,1057,1054,1052,1049,1046,1043,1040,1038}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1071,1068,1065,1062,1059,1056,1052,1049,1046}},
						{{-20,-15,-10,-5,0,5,10,15,20},{1082,1078,1075,1071,1067,1064,1060,1056,1052}}
					}
					);

	m_dynViscosity[static_cast<int>(GK_Ethylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{1.7918E-03,1.7310E-03,1.6735E-03,1.6190E-03,1.5673E-03,1.5182E-03,1.4715E-03,1.4270E-03,1.3847E-03,1.3444E-03,1.3059E-03,1.2692E-03,1.2340E-03,1.2005E-03,1.1683E-03,1.1376E-03,1.1081E-03,1.0798E-03,1.0527E-03,1.0266E-03,1.0016E-03,9.5440E-04,9.1068E-04,8.9002E-04,8.7011E-04,8.3238E-04,7.9722E-04,7.6441E-04,7.3373E-04,7.0499E-04,6.7804E-04,6.5273E-04,6.2892E-04,6.0650E-04,5.8535E-04,5.6539E-04,5.4652E-04,5.0363E-04,4.6604E-04,4.3291E-04,4.0356E-04,3.7742E-04,3.5406E-04,3.3308E-04,3.1418E-04,2.9709E-04}},
						{{-3,-1,1,3,5,7,9,11,13,15,17,19},{0.00284,0.00261,0.00241,0.00223,0.00207,0.00192,0.00179,0.00167,0.00157,0.00147,0.00138,0.0013}},
						{{-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.00495,0.00451,0.00412,0.00378,0.00347,0.0032,0.00296,0.00275,0.00256,0.00238,0.00223,0.00209,0.00196,0.00185,0.00174}},
						{{-16,-11,-6,-1,4,9,14,19},{0.01046,0.00797,0.00622,0.00496,0.00404,0.00334,0.00282,0.00241}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.01891,0.01393,0.01054,0.00816,0.00647,0.00524,0.00432,0.00363,0.0031}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.02742,0.01986,0.01479,0.01129,0.00883,0.00706,0.00577,0.0048,0.00407}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.04065,0.02887,0.02109,0.01583,0.01218,0.0096,0.00773,0.00636,0.00533}}
					}
					);

	m_dynViscosity[static_cast<int>(GK_Propylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{1.7918E-03,1.7310E-03,1.6735E-03,1.6190E-03,1.5673E-03,1.5182E-03,1.4715E-03,1.4270E-03,1.3847E-03,1.3444E-03,1.3059E-03,1.2692E-03,1.2340E-03,1.2005E-03,1.1683E-03,1.1376E-03,1.1081E-03,1.0798E-03,1.0527E-03,1.0266E-03,1.0016E-03,9.5440E-04,9.1068E-04,8.9002E-04,8.7011E-04,8.3238E-04,7.9722E-04,7.6441E-04,7.3373E-04,7.0499E-04,6.7804E-04,6.5273E-04,6.2892E-04,6.0650E-04,5.8535E-04,5.6539E-04,5.4652E-04,5.0363E-04,4.6604E-04,4.3291E-04,4.0356E-04,3.7742E-04,3.5406E-04,3.3308E-04,3.1418E-04,2.9709E-04}},
						{{-2,0,2,4,6,8,10,12,14,16,18,20},{0.003,0.00275,0.00252,0.00232,0.00214,0.00199,0.00184,0.00172,0.0016,0.0015,0.00141,0.00133}},
						{{-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.00654,0.0059,0.00534,0.00485,0.00442,0.00404,0.00371,0.00341,0.00315,0.00292,0.00271,0.00253,0.00236,0.00221}},
						{{-12,-7,-2,3,8,13,18},{0.01531,0.01128,0.00853,0.00661,0.00525,0.00425,0.00351}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.04452,0.03038,0.02139,0.0155,0.01155,0.00883,0.00691,0.00553,0.00452}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.07601,0.05015,0.03419,0.02404,0.0174,0.01295,0.00989,0.00773,0.00618}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.13931,0.08855,0.05826,0.0396,0.02777,0.02004,0.01486,0.01131,0.00881}}
					}
					);


	m_kinViscosity[static_cast<int>(GK_Ethylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{1.7920E-06,1.7310E-06,1.6740E-06,1.6190E-06,1.5670E-06,1.5180E-06,1.4720E-06,1.4270E-06,1.3850E-06,1.3450E-06,1.3060E-06,1.2700E-06,1.2350E-06,1.2010E-06,1.1690E-06,1.1390E-06,1.1090E-06,1.0810E-06,1.0540E-06,1.0280E-06,1.0030E-06,9.5650E-07,9.1310E-07,8.9270E-07,8.7290E-07,8.3550E-07,8.0070E-07,7.6820E-07,7.3790E-07,7.0950E-07,6.8280E-07,6.5780E-07,6.3430E-07,6.1220E-07,5.9140E-07,5.7170E-07,5.5310E-07,5.1090E-07,4.7400E-07,4.4150E-07,4.1270E-07,3.8720E-07,3.6430E-07,3.4390E-07,3.2550E-07,3.0890E-07}},
						{{-3,-1,1,3,5,7,9,11,13,15,17,19},{0.00000279,0.00000257,0.00000237,0.00000219,0.00000203,0.00000189,0.00000176,0.00000165,0.00000154,0.00000145,0.00000136,0.00000128}},
						{{-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.00000476,0.00000434,0.00000397,0.00000364,0.00000335,0.0000031,0.00000287,0.00000266,0.00000248,0.00000231,0.00000216,0.00000203,0.0000019,0.00000179,0.00000169}},
						{{-16,-11,-6,-1,4,9,14,19},{0.00000987,0.00000754,0.00000589,0.00000471,0.00000384,0.00000319,0.00000269,0.00000231}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00001752,0.00001294,0.00000981,0.00000761,0.00000605,0.00000491,0.00000406,0.00000342,0.00000293}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00002502,0.00001816,0.00001355,0.00001037,0.00000813,0.00000652,0.00000534,0.00000445,0.00000378}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00003654,0.00002601,0.00001905,0.00001433,0.00001106,0.00000874,0.00000706,0.00000582,0.00000489}}
					}
					);

	m_kinViscosity[static_cast<int>(GK_Propylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{1.7920E-06,1.7310E-06,1.6740E-06,1.6190E-06,1.5670E-06,1.5180E-06,1.4720E-06,1.4270E-06,1.3850E-06,1.3450E-06,1.3060E-06,1.2700E-06,1.2350E-06,1.2010E-06,1.1690E-06,1.1390E-06,1.1090E-06,1.0810E-06,1.0540E-06,1.0280E-06,1.0030E-06,9.5650E-07,9.1310E-07,8.9270E-07,8.7290E-07,8.3550E-07,8.0070E-07,7.6820E-07,7.3790E-07,7.0950E-07,6.8280E-07,6.5780E-07,6.3430E-07,6.1220E-07,5.9140E-07,5.7170E-07,5.5310E-07,5.1090E-07,4.7400E-07,4.4150E-07,4.1270E-07,3.8720E-07,3.6430E-07,3.4390E-07,3.2550E-07,3.0890E-07}},
						{{-2,0,2,4,6,8,10,12,14,16,18,20},{0.00000297,0.00000272,0.0000025,0.0000023,0.00000213,0.00000197,0.00000183,0.00000171,0.00000159,0.00000149,0.0000014,0.00000132}},
						{{-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.00000637,0.00000575,0.00000521,0.00000473,0.00000432,0.00000395,0.00000363,0.00000334,0.00000309,0.00000286,0.00000266,0.00000248,0.00000232,0.00000218}},
						{{-12,-7,-2,3,8,13,18},{0.00001468,0.00001084,0.00000822,0.00000638,0.00000508,0.00000412,0.00000341}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00004202,0.00002875,0.00002029,0.00001474,0.00001101,0.00000844,0.00000663,0.00000532,0.00000436}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00007095,0.00004694,0.0000321,0.00002264,0.00001644,0.00001227,0.0000094,0.00000737,0.00000591}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.00012879,0.00008213,0.00005422,0.00003698,0.00002601,0.00001884,0.00001402,0.00001071,0.00000838}}
					}
					);


	m_lambda[static_cast<int>(GK_Ethylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{0.55565,0.55818,0.56066,0.56309,0.56547,0.56779,0.57008,0.57231,0.57451,0.57666,0.57878,0.58085,0.58289,0.58489,0.58686,0.5888,0.5907,0.59257,0.59442,0.59623,0.59801,0.60149,0.60487,0.60652,0.60814,0.61131,0.61439,0.61738,0.62029,0.6231,0.62584,0.62849,0.63107,0.63357,0.636,0.63835,0.64064,0.64604,0.65102,0.65559,0.65978,0.66358,0.66701,0.67008,0.6728,0.67517}},
						{{-3,-1,1,3,5,7,9,11,13,15,17,19},{0.556,0.557,0.559,0.56,0.562,0.563,0.564,0.566,0.567,0.569,0.57,0.572}},
						{{-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.509,0.51,0.511,0.512,0.513,0.514,0.515,0.516,0.517,0.518,0.519,0.52,0.521,0.522,0.523}},
						{{-16,-11,-6,-1,4,9,14,19},{0.471,0.472,0.473,0.475,0.476,0.477,0.478,0.479}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.443,0.443,0.443,0.443,0.443,0.442,0.442,0.442,0.442}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.422,0.421,0.419,0.418,0.416,0.415,0.414,0.412,0.411}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.408,0.405,0.402,0.399,0.397,0.394,0.391,0.389,0.386}}
					}
					);

	m_lambda[static_cast<int>(GK_Propylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{0.55565,0.55818,0.56066,0.56309,0.56547,0.56779,0.57008,0.57231,0.57451,0.57666,0.57878,0.58085,0.58289,0.58489,0.58686,0.5888,0.5907,0.59257,0.59442,0.59623,0.59801,0.60149,0.60487,0.60652,0.60814,0.61131,0.61439,0.61738,0.62029,0.6231,0.62584,0.62849,0.63107,0.63357,0.636,0.63835,0.64064,0.64604,0.65102,0.65559,0.65978,0.66358,0.66701,0.67008,0.6728,0.67517}},
						{{-2,0,2,4,6,8,10,12,14,16,18,20},{0.556,0.558,0.56,0.562,0.564,0.566,0.568,0.57,0.572,0.574,0.576,0.578}},
						{{-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{0.5,0.501,0.503,0.504,0.506,0.507,0.509,0.51,0.512,0.513,0.515,0.517,0.518,0.52}},
						{{-12,-7,-2,3,8,13,18},{0.45,0.453,0.456,0.458,0.461,0.463,0.466}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.41,0.411,0.412,0.414,0.415,0.416,0.417,0.419,0.42}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.379,0.379,0.379,0.379,0.379,0.379,0.379,0.379,0.379}},
						{{-20,-15,-10,-5,0,5,10,15,20},{0.354,0.353,0.352,0.351,0.349,0.348,0.347,0.345,0.344}}
					}
					);


	m_cp[static_cast<int>(GK_Ethylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{4219,4216,4213,4210,4207,4205,4203,4201,4199,4197,4195,4194,4193,4191,4190,4189,4188,4187,4186,4186,4185,4183,4182,4182,4181,4181,4180,4180,4179,4179,4179,4179,4179,4179,4179,4179,4180,4181,4183,4185,4188,4192,4196,4200,4205,4211}},
						{{-3,-1,1,3,5,7,9,11,13,15,17,19},{4090,4090,4090,4090,4090,4090,4090,4100,4100,4100,4100,4100}},
						{{-8,-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{3870,3880,3880,3880,3880,3890,3890,3890,3890,3900,3900,3900,3910,3910,3910}},
						{{-16,-11,-6,-1,4,9,14,19},{3650,3660,3670,3680,3690,3700,3710,3720}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3430,3440,3450,3470,3480,3490,3500,3520,3530}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3220,3230,3250,3260,3280,3290,3310,3320,3340}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3000,3020,3040,3060,3080,3090,3110,3130,3150}}
					}
					);

	m_cp[static_cast<int>(GK_Propylene)].set({0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6},
					{
						{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,30,32,34,36,38,40,42,44,46,48,50,55,60,65,70,75,80,85,90,95},
						{4219,4216,4213,4210,4207,4205,4203,4201,4199,4197,4195,4194,4193,4191,4190,4189,4188,4187,4186,4186,4185,4183,4182,4182,4181,4181,4180,4180,4179,4179,4179,4179,4179,4179,4179,4179,4180,4181,4183,4185,4188,4192,4196,4200,4205,4211}},
						{{-2,0,2,4,6,8,10,12,14,16,18,20},{4180,4190,4190,4200,4200,4200,4210,4210,4220,4220,4230,4230}},
						{{-6,-4,-2,0,2,4,6,8,10,12,14,16,18,20},{4030,4030,4040,4040,4050,4060,4060,4070,4070,4080,4080,4090,4090,4100}},
						{{-12,-7,-2,3,8,13,18},{3850,3860,3880,3890,3910,3920,3940}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3640,3660,3670,3690,3710,3720,3740,3760,3780}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3430,3450,3470,3490,3510,3530,3550,3570,3590}},
						{{-20,-15,-10,-5,0,5,10,15,20},{3210,3230,3250,3270,3290,3310,3330,3360,3380}}
					}
					);
}

double WaterMixProperties::density(double temperature) {
	return m_densities[m_glycolKind].value(m_glycolContent, temperature);
}

double WaterMixProperties::dynViscosity(double temperature) {
	return m_dynViscosity[m_glycolKind].value(m_glycolContent, temperature);
}

double WaterMixProperties::kinViscosity(double temperature) {
	return m_kinViscosity[m_glycolKind].value(m_glycolContent, temperature);
}

double WaterMixProperties::lambda(double temperature) {
	return m_lambda[m_glycolKind].value(m_glycolContent, temperature);
}

double WaterMixProperties::prandtl(double temperature) {
	return dynViscosity(temperature)*heatCapacity(temperature)/lambda(temperature);
}

double WaterMixProperties::heatCapacity(double temperature) {
	return m_cp[m_glycolKind].value(m_glycolContent, temperature);
}

double WaterMixProperties::freezeTemperature() {
	return m_freezeTemperature[m_glycolKind].value(m_glycolContent);
}

} // namespace IBK
