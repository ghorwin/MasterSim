/*! \file IBKMK.h
	\brief IBK Math Kernel - Optimized C Routines for Mathematical Calculations

\mainpage Overview of the IBK Math Kernel Library

\section intro_sec Library concept

The library is organized into low level subroutines implemented mostly in C that take all necessary data arrays as arguments. These functions are performance optimized and do never allocate dynamic memory by themselves. Consequently, these functions require workspace vectors to be passed as arguments when needed. The implementation of these low-level subroutines is in files with format IBKMKC_dense_matrix.* IBKMKC_sparse_matrix.* etc. For frequently used storage structures special implementations are available. By design, the generic function will call the respective optimized function based on function arguments, so that user code only needs to access the generic function.

\li IBKMKC_dense_matrix  - All dense matrix routines, also used for block-versions of other matrices
\li IBKMKC_tridiag_matrix - Tridiagonal and block-tridiagonal routines
\li IBKMKC_band_matrix - Banded and block-banded matrix routines
\li IBKMKC_sparse_matrix - Sparse and block-sparse routines, for both Ellpack-Itpack-for-Delphin (EID) and CSR formats
\li IBKMKC_vector_operations - All operations on vectors

For convenient use, C++ data storage classes that encapsulate data storage members and member functions for necessary operations are provided. The C++ interface makes use of the low-level C interface. Such classes are stored in files with camel-case formatting, for example IBKMK_SparseMatrix.*




\section storage_formats Matrix storage formats

\subsection dense_storage Dense Matrix Format Description

A matrix A with dimensions 3 x 3

    [ 1 2 3 ]
    [ 4 5 6 ]
    [ 7 8 9 ]

is stored in column-major order in linear memory of size n x n, when n is the matrix dimension.

    A = [ 1 4 7   2 5 8   3 6 9 ]

This storage format is used by all block-based operations of other matrix storage structures.

\subsection block_banded_storage Block-Banded Matrix Format Description

Matrix-level-ordering: row-major, Block-Storage-Type: Dense (column-major, see dense matrix storage format).

Matrix storage has dimensions n x m*m x (ml + mu + 1), where

   n - block-based matrix dimension
   m - dimension of block
   ml - block-based lower band width
   mu - block-based upper band width

A matrix

    [  1   2   3   4   5   6                 ]
    [  7   8   9  10  11  12                 ]
    [ 13  14  15  16  17  18  19  20         ]
    [ 21  22  23  24  25  26  27  28         ]
    [         29  30  31  32  33  34  35  36 ]
    [         37  38  39  40  41  42  43  44 ]
    [                 45  46  47  48  49  50 ]
    [                 51  52  53  54  55  56 ]

will be represented by n=5, m=2 (block-dimension 2x2), ml = 1, mu = 2.
It will be stored in linear memory with structure

    A     = [ <ml block columns> <main diagonal block column> <mu block columns> ]

for the example above that is:

    A     = [ 0  0  0  0     1  7  2  8    3  9  4  10   5  11 6  12
              13 21 14 22    .. .. .. ..
              ...
              45 51 46 52    47 53 48 54   49 55 50 56   0  0  0  0  ]


\subsection block_tridiagonal_storage Block-Tridiagonal Matrix Format Description

Matrix-level-ordering: diagonals of size n blocks, lower, main, upper, Block-Storage-Type: Dense (column-major, see dense matrix storage format).

Matrix storage has dimensions 3 x n x m*m, where

   n - block-based matrix dimension
   m - dimension of block

The blocks (1,3) and  (n,n-2) can also be stored and are included in LU and backsolving routines (make sure to zero them out if they are empty).
The blocks are stored in the unused blocks of the lower and upper block diagonals, respectively.

A matrix

    [  1   2   3   4   5   6                 ]
    [  7   8   9  10  11  12                 ]
    [ 13  14  15  16  17  18                 ]
    [ 19  20  21  22  23  24                 ]
    [         xx  xx  xx  xx  xx  xx         ]
    [         xx  xx  xx  xx  xx  xx         ]
    [                 xx  xx  xx  xx  xx  xx ]
    [                 xx  xx  xx  xx  xx  xx ]
    [                 25  26  27  28  29  30 ]
    [                 31  32  33  34  35  36 ]

will be represented by n=5, m=2 (block-dimension 2x2). Each block-diagonal has the sizne n*m*m = 5*2*2 = 20

It will be stored in linear memory with structure

    A     = [ <lower block column> <main block column> <upper block column> ]

for the example above that is:

    A     = [  5 11  6 12    13 19 14 20   xx xx xx xx ... 27 33 28 34             < lower block diagonl
               1  7  2  8    15 21 16 22   xx xx xx xx ... 29 35 30 36             < main block diagonal
               3  9  4  10   17 23 18 24   xx xx xx xx ... 25 31 26 32 ]           < upper block diagonal



\subsection ellpack_itpack_storage Ellpack-Itpack-for-Delphin (EID) Sparse Matrix Format Description

Matrix storage has size n x m, with m being the number of non-zero elements per row.

A matrix

    [  1   2          ]
    [  3   4   5      ]
    [      6   7      ]
    [  8   9  10      ]
    [     11  12  13  ]

will be represented by n=5, m=3

    A     = [ 1 2 0   3 4 5   6 7 0   8 9 10   11 12 13 ]
    index = [ 0 1 1   0 1 2   1 2 2   0 1  2    1  2  3 ]

The index for missing elements must be the preceding index and the corresponding
value must be zero, as in first row the example above: 0 1 1 --> last index is invalid.

Column indices within _each_ index row must increase monotonically (sorted by column index).

This storage scheme allows for very efficient multiplication of a vector b with 
this matrix. This leads to the following equation for first row:

    r[0] = A[0]*b[index[0]] + A[1]*b[index[1]] + A[2]*b[index[2]]
         = 1*b[0] + 2*b[1] + 0*b[1]

While the unused elements are still used in the multiplication (0*b[1]), this is faster 
than checking for unused elements with if clauses.

\subsection CSR_storage Compresses-Sparse-Row (CSR) Sparse Matrix Format Description

... same as standard format, see Saad and other standard texts.

*/
